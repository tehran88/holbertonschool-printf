.TH _PRINTF 3 "November 30, 2024" "1.0" "Custom Library Functions"

.SH NAME
_printf \- custom formatted output conversion

.SH LIBRARY
.B #include "main.h"

.SH SYNOPSIS
.B int _printf(const char *format, ...);

.SH DESCRIPTION
The
.B _printf
function produces output according to a format string, mimicking the standard library's printf function.
This custom implementation supports the following format specifiers:c, s, d, i

.SH Conversion specifiers
d, i - The int argument is converted to signed decimal notation.

c - The int argument is converted to an unsigned char

s - The const char * argument is expected to be a pointer to an array of character type (pointer to a string).

% - '%' is written.

.SH RETURN VALUE
The
.B _printf
function returns the number of characters printed (excluding the null byte used to end output to strings).

.SH EXAMPLES
Example Code 1:


#include "main.h"


int main(void)

{

_printf("Character: %c\n", 'H');

_printf("String: %s\n", "Hello, world!");

_printf("Integer: %d\n", 42);


return (0);

}


Example Code 2:


#include "main.h"

int main(void)

{

_printf("%d", 5, 6, 7, "hello");


return (0);

}


In example Code 2 printf("%d", 5, 6, 7, "hello"); will print 5, but the presence of the extra arguments is problematic and can lead to undefined behavior.
It's important to ensure that the number of format specifiers matches the number of arguments provided to avoid such issues.

.SH AUTHORS
Tehran Abilova
.br
Atakhan Hadjizade
